/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_FASTQ {
        publishDir = [
            path: { "${params.outdir}/samtools/fastq" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        ext.prefix = { "${meta.library_id}_L${meta.lane}_${meta.strandedness}_${meta.damage_treatment}_raw" }
        publishDir = [
            path: { "${params.outdir}/fastqc/raw" },
            pattern: "*.html"
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

    withName: GUNZIP_FASTA {
        publishDir = [
            path: { "${params.outdir}/reference/fasta" },
            enabled: params.save_reference,
            pattern: "*.{fasta,fa,fna}",
            mode: 'copy'
        ]
    }

    withName: BWA_INDEX {
        publishDir = [
            path: { "${params.outdir}/reference/" },
            enabled: params.save_reference,
            pattern: "bwa",
            mode: 'copy'
        ]
    }

    withName: BOWTIE2_BUILD {
        publishDir = [
            path: { "${params.outdir}/reference/" },
            enabled: params.save_reference,
            pattern: "bowtie2",
            mode: 'copy'
        ]
    }

    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/reference/fai" },
            enabled: params.save_reference,
            pattern: "*.fai",
            mode: 'copy'
        ]
    }

    withName: GATK4_CREATESEQUENCEDICTIONARY {
        publishDir = [
            path: { "${params.outdir}/reference/gatk4" },
            enabled: params.save_reference,
            pattern: "*.dict",
            mode: 'copy'
        ]
    }

    withName: FASTP_POLYG_TRIM {
        ext.when = "${params.fastp_trim_polyg_run}"
        ext.args = "-A -g --poly_g_min_len ${params.fastp_trim_polyg_length} -Q -L"
        ext.prefix = { "${meta.library_id}_L${meta.lane}_${meta.strandedness}_${meta.damage_treatment}_polygtrim" }
        publishDir = [
            path: { "${params.outdir}/fastp/polyg_trimmed" },
            pattern: "*.trim.fastq.gz",
            mode: 'copy'
        ]
    }

    withName: ADAPTERREMOVAL {
        // TODO Reactivate and test, the npass to the other modules
        /*
        ext.args = [
                if ( params.clipmerge_skiptrim ) {
                    "--adapter1 '' --adapter2 ''"
                } else if ( params.clipmerge_adapters_list ) {
                    '--adapter-list ${params.clipmerge_adapterremoval_list}'
                } else {
                    "--adapter1 ${params.clipmerge_adapterforward} --adapter2 ${params.clipmerge_adapterreverse}"
                },
                "--minlength ${params.clipmerge_minreadlength",                                                                                                                                           // Read length filtering
                !params.clipmerge_skipqualitytrim ? "--trimqualities --trimns --minquality ${params.clipmerge_minbasequality}" : "",                                                                     // Quality trimming
                "--minadapteroverlap ${params.clipmerge_adapteroverlaplength}"                                                                                                                            // Adapter overlap amount
            ].join(" ").trim()
            */
        ext.prefix = { "${meta.library_id}_L${meta.lane}_${meta.strandedness}_${meta.damage_treatment}_clipmerge" }
    }

    // TODO work out how to publish only final combined or single output FQ (SE/mergedonly) in folder? Maybe use both params.clipmerge_merged && single_end simultaneously? [Possibly done]
    withName: LEEHOM {
        ext.args = ""
        ext.prefix = { "${meta.library_id}_L${meta.lane}_${meta.strandedness}_${meta.damage_treatment}_clipmerge" }
        publishDir = [
                path: { "${params.outdir}/leehom" },
                pattern: "*.{fq.gz,log}",
                mode: 'copy'
            ]
    }

    withName: CAT_LEEHOM {
        ext.args = ""
        ext.prefix = { "${meta.library_id}_L${meta.lane}_${meta.strandedness}_${meta.damage_treatment}_clipmerge" }
        publishDir = [
            path: { "${params.outdir}/leehom" },
            pattern: "*.combined.fq.gz",
            mode: 'copy'
        ]
    }

    withName: FASTP {
        ext.args = params.clipmerge_mergedonly ? "" : "--include_unmerged"
        ext.prefix = { "${meta.library_id}_L${meta.lane}_${meta.strandedness}_${meta.damage_treatment}_clipmerge" }
        publishDir = [
                path: { "${params.outdir}/fastp/adapterrtrimed_merged" },
                pattern: "*.{fastq.gz,log}",
                mode: 'copy'
            ]
    }

    withName: FASTQC_AFTER_PROCESSING {
        ext.args = '--quiet'
        ext.prefix = { "${meta.library_id}_L${meta.lane}_${meta.strandedness}_${meta.damage_treatment}_processed" }
        publishDir = [
            path: { "${params.outdir}/fastqc/processed" },
            pattern: "*.html"
        ]
    }

}
